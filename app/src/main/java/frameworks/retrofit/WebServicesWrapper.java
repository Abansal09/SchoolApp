package frameworks.retrofit;import com.google.gson.Gson;import com.google.gson.internal.LinkedTreeMap;import java.io.File;import java.util.List;import java.util.Map;import frameworks.appsession.AppBaseApplication;import frameworks.appsession.UserInfo;import okhttp3.MediaType;import okhttp3.MultipartBody;import okhttp3.OkHttpClient;import okhttp3.RequestBody;import okhttp3.logging.HttpLoggingInterceptor;import retrofit2.Call;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;import retrofit2.http.GET;import retrofit2.http.Header;import retrofit2.http.Path;public class WebServicesWrapper {    //private final static String BASE_URL = "https://vilger.pier31.co/";    private final static String BASE_URL = "http://138.68.112.90/";  ///  private final static String BASE_URL = "http://app.villiger.io/";    private static WebServicesWrapper wrapper;    protected WebServices webServices;    private Gson gson;    private WebServicesWrapper(String baseUrl) {        HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor();        interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);        OkHttpClient client = new OkHttpClient.Builder().addInterceptor(interceptor).build();        webServices = new Retrofit.Builder()                .addConverterFactory(new RetrofitConverter())                .addConverterFactory(GsonConverterFactory.create())                .baseUrl(baseUrl)                .client(client)                .build().create(WebServices.class);        gson = new Gson();    }    public static WebServicesWrapper getInstance() {        if (wrapper == null)            wrapper = new WebServicesWrapper(BASE_URL);        return wrapper;    }    private Map<String, String> getPartMap(Object object) {        return (LinkedTreeMap) gson.fromJson(gson.toJson(object), Object.class);    }    private MultipartBody.Part getPart(String name, File file) {        if (file == null || name == null)            return null;        RequestBody requestFile = RequestBody.create(MediaType.parse("multipart/form-data"), file);        MultipartBody.Part body = MultipartBody.Part.createFormData(name, file.getName(), requestFile);        return body;    }    public String getAuthKey() {        return "Token " + AppBaseApplication.getApplication().getmAuthID();    }    public void getMyProfile(ResponseResolver<UserInfo> responseResolver) {    }//    public Call<BlossomResponse<LoginResponse>> login(String username, String password, ResponseResolver<LoginResponse> responseResolver) {//        Call<BlossomResponse<LoginResponse>> loginCall = webServices.login(APP_HEADER, username, password);//        loginCall.enqueue(responseResolver);//        return loginCall;//    }////    public Call<BlossomResponse<ArrayList<School>>> getSchool(ResponseResolver<ArrayList<School>> responseResolver) {//        Call<BlossomResponse<ArrayList<School>>> schoolResponseCall = webServices.getSchool(APP_HEADER, getAccessToken(), getCoachId());//        schoolResponseCall.enqueue(responseResolver);//        return schoolResponseCall;//    }////    public Call<BlossomResponse<ArrayList<Event>>> getEventList(int schoolId, ResponseResolver<ArrayList<Event>> responseResolver) {//        Call<BlossomResponse<ArrayList<Event>>> eventResponseCall = webServices.getEventList(APP_HEADER, getAccessToken(), schoolId);//        eventResponseCall.enqueue(responseResolver);//        return eventResponseCall;//    }////    public Call<BlossomResponse<StudentListResponse>> getStudentList(int eventId, ResponseResolver<StudentListResponse> responseResolver) {//        Call<BlossomResponse<StudentListResponse>> eventResponseCall = webServices.getStudentList(APP_HEADER, getAccessToken(), eventId);//        eventResponseCall.enqueue(responseResolver);//        return eventResponseCall;//    }////    public Call<BlossomResponse<AssessmentResponse>> getAssessment(int assessmentId, ResponseResolver<AssessmentResponse> responseResolver) {//        Call<BlossomResponse<AssessmentResponse>> assessmentResponseCall = webServices.getAssessment(APP_HEADER, getAccessToken(), assessmentId);//        assessmentResponseCall.enqueue(responseResolver);//        return assessmentResponseCall;//    }////    public Call<BlossomResponse<LoginResponse>> ping(String accessToken, ResponseResolver<LoginResponse> responseResolver) {//        Call<BlossomResponse<LoginResponse>> loginCall = webServices.ping(APP_HEADER, accessToken);//        loginCall.enqueue(responseResolver);//        return loginCall;//    }////    public Call<BlossomResponse<Child>> postChild(Child child, ResponseResolver<Child> responseResolver) {//        Call<BlossomResponse<Child>> childResponseCall = webServices.postChild(APP_HEADER, getAccessToken(), child);//        childResponseCall.enqueue(responseResolver);//        return childResponseCall;//    }////    public Call<BlossomResponse<Child>> updateChildImage(File file, int childId, ResponseResolver<Child> responseResolver) {//        Call<BlossomResponse<Child>> childResponseCall = webServices.updateChildImage//                (APP_HEADER, getAccessToken(), getPart("photo", file), "child", childId);//        childResponseCall.enqueue(responseResolver);//        return childResponseCall;//    }}